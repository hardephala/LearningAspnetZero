@using Abp.Web.Mvc.Alerts
@using Arch.Localization
@using Arch.Web.Areas.App.Views.Shared.Components.AppActiveUserDelegationsCombobox
@using Arch.Web.Areas.App.Views.Shared.Components.AppChatToggler
@using Arch.Web.Areas.App.Views.Shared.Components.AppLanguageSwitch
@using Arch.Web.Areas.App.Views.Shared.Components.AppLogo
@using Arch.Web.Areas.App.Views.Shared.Components.AppMenu
@using Arch.Web.Areas.App.Views.Shared.Components.AppQuickThemeSelect
@using Arch.Web.Areas.App.Views.Shared.Components.AppRecentNotifications
@using Arch.Web.Areas.App.Views.Shared.Components.AppSubscriptionBar
@using Arch.Web.Areas.App.Views.Shared.Components.AppUserMenu
@using Arch.Web.Areas.App.Views.Shared.Themes.Theme5.Components.AppTheme5Brand
@using Arch.Web.Areas.App.Views.Shared.Themes.Theme5.Components.AppTheme5Footer

@inject IAlertManager AlertManager

@{
    Layout = "~/Areas/App/Views/Layout/_Layout.cshtml";
    var theme = await GetTheme();
}

@section Styles{
    <link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme5/css/style@(theme.BaseSettings.Layout.DarkMode ? ".dark" : "").bundle@(CultureHelper.IsRtl ? ".rtl" : "").css" asp-append-version="true"/>
    <link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme5/plugins/global/plugins@(theme.BaseSettings.Layout.DarkMode ? ".dark" : "").bundle.css" asp-append-version="true"/>
    <link rel="stylesheet" abp-href="/Common/Styles/Themes/theme5/metronic-customize.css" asp-append-version="true"/>
    <link rel="stylesheet" abp-href="/fonts/fonts-asap-condensed.css" asp-append-version="true"/>
    @await RenderSectionAsync("Styles", false)
}

@section Scripts{
    @await RenderSectionAsync("Scripts", false)
}

<div class="d-flex flex-column flex-root">
    <div class="d-flex flex-row flex-column-fluid page @(await GetContainerClass())">
         <div id="kt_aside" class="aside aside-@(theme.BaseSettings.Menu.AsideSkin) @(theme.BaseSettings.Menu.HoverableAside ? "aside-hoverable" : "")"
                     data-kt-drawer="true"
                     data-kt-drawer-name="aside"
                     data-kt-drawer-activate="{default: true, lg: false}"
                     data-kt-drawer-overlay="true"
                     data-kt-drawer-width="{default:'200px', '300px': '250px'}"
                     data-kt-drawer-direction="start"
                     data-kt-drawer-toggle="#kt_aside_mobile_toggle">
                    <div class="aside-menu flex-column-fluid">
                        @await Component.InvokeAsync(typeof(AppMenuViewComponent), new {currentPageName = ViewBag.CurrentPageName, isLeftMenuUsed = true})
                    </div>
                </div>
        <div class="d-flex flex-column flex-row-fluid wrapper" id="kt_wrapper">
            <div id="kt_header" class="header  header-fixed ">
                <div class="@(await GetContainerClass()) d-flex align-items-stretch justify-content-between">
                     <!--begin::Aside mobile toggle-->
                    <div class="d-flex align-items-center d-lg-none ms-n3 me-1" title="Show aside menu">
                        <div class="btn btn-icon btn-active-light-primary w-30px h-30px w-md-40px h-md-40px" id="kt_aside_mobile_toggle">
                            <!--begin::Svg Icon | path: icons/duotune/abstract/abs015.svg-->
                            <span class="svg-icon svg-icon-2x mt-1">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                    <path d="M21 7H3C2.4 7 2 6.6 2 6V4C2 3.4 2.4 3 3 3H21C21.6 3 22 3.4 22 4V6C22 6.6 21.6 7 21 7Z" fill="black"></path>
                                    <path opacity="0.3" d="M21 14H3C2.4 14 2 13.6 2 13V11C2 10.4 2.4 10 3 10H21C21.6 10 22 10.4 22 11V13C22 13.6 21.6 14 21 14ZM22 20V18C22 17.4 21.6 17 21 17H3C2.4 17 2 17.4 2 18V20C2 20.6 2.4 21 3 21H21C21.6 21 22 20.6 22 20Z" fill="black"></path>
                                </svg>
                            </span>
                            <!--end::Svg Icon-->
                        </div>
                    </div>
                    <!--end::Aside mobile toggle-->
                    <div class="d-flex align-items-center flex-grow-1 flex-lg-grow-0 w-lg-225px me-5">
                        @await Component.InvokeAsync(typeof(AppTheme5BrandViewComponent))
                    </div>
                    <div class="topbar d-flex align-items-stretch flex-shrink-0">
                        @await Component.InvokeAsync(typeof(AppActiveUserDelegationsComboboxViewComponent))
                        @await Component.InvokeAsync(typeof(AppSubscriptionBarViewComponent), new { cssClass = "btn btn-icon btn-active-light btn-active-color-primary position-relative w-30px h-30px w-md-40px h-md-40px me-2" })
                        @await Component.InvokeAsync(typeof(AppQuickThemeSelectViewComponent), new { cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px me-2" })
                        @await Component.InvokeAsync(typeof(AppLanguageSwitchViewComponent), new { cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px me-2" })
                        @await Component.InvokeAsync(typeof(AppRecentNotificationsViewComponent), new { cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px position-relative me-2" })
                        @await Component.InvokeAsync(typeof(AppChatTogglerViewComponent), new { cssClass = "btn btn-icon btn-active-light btn-active-color-primary w-30px h-30px w-md-40px h-md-40px position-relative me-2" })
                        @await Component.InvokeAsync(typeof(AppUserMenuViewComponent), new { togglerCssClass = "btn btn-active-light btn-active-color-primary w-auto px-5 py-1", textCssClass = "text-dark-50 font-weight-bolder font-size-sm d-none d-md-inline me-3", symbolCssClass = "symbol symbol-35px symbol-light-success", symbolTextCssClas = "symbol-label font-size-h5 font-weight-bold" })
                    </div>
                </div>
            </div>
            @if (AlertManager.Alerts.Any())
            {
                <div id="AbpPageAlerts">
                    @foreach (var alertMessage in AlertManager.Alerts)
                    {
                        <div class="alert alert-@alertMessage.Type.ToString().ToLower() @Html.Raw(alertMessage.Dismissible?"alert-dismissible":"")" role="alert">
                            <div class="alert-text">
                                <h4 class="alert-heading">					
                                    @alertMessage.Title
                                </h4>
                                <p>@alertMessage.Text</p>
                            </div>
                            @if (alertMessage.Dismissible)
                            {
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            }
                        </div>
                    }
                </div>
            }
            @RenderBody()
            @await Component.InvokeAsync(typeof(AppTheme5FooterViewComponent))
        </div>
    </div>
</div>
