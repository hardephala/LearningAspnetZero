@using Abp.Web.Mvc.Alerts
@using Arch.Localization
@using Arch.Web.Areas.App.Views.Shared.Components.AppActiveUserDelegationsCombobox
@using Arch.Web.Areas.App.Views.Shared.Components.AppChatToggler
@using Arch.Web.Areas.App.Views.Shared.Components.AppLanguageSwitch
@using Arch.Web.Areas.App.Views.Shared.Components.AppMenu
@using Arch.Web.Areas.App.Views.Shared.Components.AppQuickThemeSelect
@using Arch.Web.Areas.App.Views.Shared.Components.AppRecentNotifications
@using Arch.Web.Areas.App.Views.Shared.Components.AppSubscriptionBar
@using Arch.Web.Areas.App.Views.Shared.Components.AppUserMenu
@using Arch.Web.Areas.App.Views.Shared.Themes.Theme10.Components.AppTheme10Brand
@using Arch.Web.Areas.App.Views.Shared.Themes.Theme10.Components.AppTheme10Footer

@inject IAlertManager AlertManager

@{
    Layout = "~/Areas/App/Views/Layout/_Layout.cshtml";
    var theme = await GetTheme();
}

@section Styles{
<link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme10/css/style@(theme.BaseSettings.Layout.DarkMode ? ".dark" : "").bundle@(CultureHelper.IsRtl ? ".rtl" : "").css" asp-append-version="true" />
<link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme10/plugins/global/plugins@(theme.BaseSettings.Layout.DarkMode ? ".dark" : "").bundle.css" asp-append-version="true" />
<link rel="stylesheet" abp-href="/Common/Styles/Themes/theme10/metronic-customize.css" asp-append-version="true" />
<link rel="stylesheet" abp-href="/fonts/fonts-asap-condensed.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", false)
}

@section Scripts{
    @await RenderSectionAsync("Scripts", false)
}

<div class="d-flex flex-column flex-root">
    <div class="page d-flex flex-row flex-column-fluid">
        <div id="kt_aside" class="aside py-9" data-kt-drawer="true" data-kt-drawer-name="aside" data-kt-drawer-activate="{default: true, lg: false}" data-kt-drawer-overlay="true" data-kt-drawer-width="{default:'200px', '300px': '250px'}" data-kt-drawer-direction="start" data-kt-drawer-toggle="#kt_aside_toggle">
            <div class="aside-menu flex-column-fluid ps-5 pe-3 mb-7" id="kt_aside_menu">
                <div class="w-100 hover-scroll-overlay-y d-flex pe-2" id="kt_aside_menu_wrapper" data-kt-scroll="true" data-kt-scroll-activate="{default: false, lg: true}" data-kt-scroll-height="auto" data-kt-scroll-dependencies="#kt_aside_footer, #kt_header" data-kt-scroll-wrappers="#kt_aside, #kt_aside_menu, #kt_aside_menu_wrapper" data-kt-scroll-offset="102" style="height: 704px;">
                    @await Component.InvokeAsync(typeof(AppMenuViewComponent), new { currentPageName = ViewBag.CurrentPageName, isLeftMenuUsed = true })
                </div>
            </div>
        </div>
        <div class="wrapper d-flex flex-column flex-row-fluid" id="kt_wrapper">
            <div id="kt_header" class="header header-bg">
                <div class="container-fluid">
                    <div class="header-brand me-5">
                        <div class="d-flex align-items-center d-lg-none ms-n2 me-2" title="Show aside menu">
                            <div class="btn btn-icon btn-active-color-primary w-30px h-30px" id="kt_aside_toggle">
                                <span class="svg-icon svg-icon-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                        <path d="M21 7H3C2.4 7 2 6.6 2 6V4C2 3.4 2.4 3 3 3H21C21.6 3 22 3.4 22 4V6C22 6.6 21.6 7 21 7Z" fill="black"></path>
                                        <path opacity="0.3" d="M21 14H3C2.4 14 2 13.6 2 13V11C2 10.4 2.4 10 3 10H21C21.6 10 22 10.4 22 11V13C22 13.6 21.6 14 21 14ZM22 20V18C22 17.4 21.6 17 21 17H3C2.4 17 2 17.4 2 18V20C2 20.6 2.4 21 3 21H21C21.6 21 22 20.6 22 20Z" fill="black"></path>
                                    </svg>
                                </span>
                            </div>
                        </div>
                        @await Component.InvokeAsync(typeof(AppTheme10BrandViewComponent))
                    </div>
                    <div class="topbar d-flex align-items-stretch">
                        @await Component.InvokeAsync(typeof(AppActiveUserDelegationsComboboxViewComponent))
                        @await Component.InvokeAsync(typeof(AppSubscriptionBarViewComponent), new { cssClass = "btn btn-icon btn-borderless btn-active-primary position-relative bg-white bg-opacity-10 me-2", iconClass="flaticon-interface-7 fs-4 text-white" })
                        @await Component.InvokeAsync(typeof(AppQuickThemeSelectViewComponent), new { cssClass = "btn btn-icon btn-borderless btn-active-primary bg-white bg-opacity-10 me-2", iconClass="flaticon-interface-7 fs-4 text-white" })
                        @await Component.InvokeAsync(typeof(AppLanguageSwitchViewComponent), new { cssClass = "btn btn-icon btn-borderless btn-active-primary bg-white bg-opacity-10 me-2" })
                        @await Component.InvokeAsync(typeof(AppRecentNotificationsViewComponent), new { cssClass = "btn btn-icon btn-borderless btn-active-primary bg-white bg-opacity-10 position-relative me-2", iconClass="flaticon-alert-2 fs-4 unread-notification text-white" })
                        @await Component.InvokeAsync(typeof(AppChatTogglerViewComponent), new { cssClass = "btn btn-icon btn-borderless btn-active-primary bg-white bg-opacity-10 position-relative me-2", iconClass="flaticon-chat-2 fs-4 text-white" })
                        @await Component.InvokeAsync(typeof(AppUserMenuViewComponent), new { togglerCssClass = "btn btn-icon btn-borderless btn-active-primary bg-white bg-opacity-10 me-2 px-5 w-auto", textCssClass = "text-white opacity-90 font-weight-bolder font-size-base d-none d-md-inline me-4", symbolCssClass = "symbol symbol-30px", symbolTextCssClas = "symbol-label fs-2 fw-bold text-success" })
                    </div>
                </div>
            </div>
            @if (AlertManager.Alerts.Any())
            {
                <div id="AbpPageAlerts">
                    @foreach (var alertMessage in AlertManager.Alerts)
                    {
                        <div class="alert alert-@alertMessage.Type.ToString().ToLower() @Html.Raw(alertMessage.Dismissible ? "alert-dismissible" : "")" role="alert">
                            <div class="alert-text">
                                <h4 class="alert-heading">
                                    @alertMessage.Title
                                </h4>
                                <p>@alertMessage.Text</p>
                            </div>
                            @if (alertMessage.Dismissible)
                            {
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            }
                        </div>
                    }
                </div>
            }
            @RenderBody()
            @await Component.InvokeAsync(typeof(AppTheme10FooterViewComponent))
        </div>
    </div>
</div>