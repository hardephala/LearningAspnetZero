@using Abp.Web.Mvc.Alerts
@using Arch.Localization
@using Arch.Web.Areas.App.Views.Shared.Components.AppActiveUserDelegationsCombobox
@using Arch.Web.Areas.App.Views.Shared.Components.AppChatToggler
@using Arch.Web.Areas.App.Views.Shared.Components.AppLanguageSwitch
@using Arch.Web.Areas.App.Views.Shared.Components.AppLogo
@using Arch.Web.Areas.App.Views.Shared.Components.AppMenu
@using Arch.Web.Areas.App.Views.Shared.Components.AppQuickThemeSelect
@using Arch.Web.Areas.App.Views.Shared.Components.AppRecentNotifications
@using Arch.Web.Areas.App.Views.Shared.Components.AppSubscriptionBar
@using Arch.Web.Areas.App.Views.Shared.Components.AppUserMenu
@using Arch.Web.Areas.App.Views.Shared.Themes.Theme3.Components.AppTheme3Brand
@using Arch.Web.Areas.App.Views.Shared.Themes.Theme3.Components.AppTheme3Footer

@inject IAlertManager AlertManager
@{
    Layout = "~/Areas/App/Views/Layout/_Layout.cshtml";
    var theme = await GetTheme();
}

@section Styles{
<link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme3/css/style@(theme.BaseSettings.Layout.DarkMode ? ".dark" : "").bundle@(CultureHelper.IsRtl ? ".rtl" : "").css" asp-append-version="true" />
<link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme3/plugins/global/plugins@(theme.BaseSettings.Layout.DarkMode ? ".dark" : "").bundle.css" asp-append-version="true" />
<link rel="stylesheet" abp-href="/Common/Styles/Themes/theme3/metronic-customize.css" asp-append-version="true" />
<link rel="stylesheet" abp-href="/fonts/fonts-montserrat.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", false)
}

@section Scripts{
    @await RenderSectionAsync("Scripts", false)
}

<div class="d-flex flex-column flex-root">
    <div class="page d-flex flex-row flex-column-fluid">
        <div id="kt_aside" class="aside py-9" data-kt-drawer="true" data-kt-drawer-name="aside" data-kt-drawer-activate="{default: true, lg: false}" data-kt-drawer-overlay="true" data-kt-drawer-width="{default:'200px', '300px': '250px'}" data-kt-drawer-direction="start" data-kt-drawer-toggle="#kt_aside_toggle" style="">
            <!--begin::Brand-->
            <div class="aside-logo flex-column-auto px-9 mb-9" id="kt_aside_logo">
                @await Component.InvokeAsync(typeof(AppTheme3BrandViewComponent))
            </div>
            <div class="aside-menu flex-column-fluid ps-5 pe-3 mb-9" id="kt_aside_menu">
                <div class="w-100 hover-scroll-overlay-y d-flex pe-2" id="kt_aside_menu_wrapper" data-kt-scroll="true" data-kt-scroll-activate="{default: false, lg: true}" data-kt-scroll-height="auto" data-kt-scroll-dependencies="#kt_aside_logo, #kt_aside_footer" data-kt-scroll-wrappers="#kt_aside, #kt_aside_menu, #kt_aside_menu_wrapper" data-kt-scroll-offset="100">
                    @await Component.InvokeAsync(typeof(AppMenuViewComponent), new {currentPageName = ViewBag.CurrentPageName, isLeftMenuUsed = true, height = "100%"})
                </div>
            </div>
        </div>
        <div class="wrapper d-flex flex-column flex-row-fluid" id="kt_wrapper">
            <div id="kt_header" class="header">
                <!--begin::Container-->
                <div class="container d-flex align-items-center justify-content-between" id="kt_header_container">
                    <div class="page-title d-flex flex-column align-items-start justify-content-center flex-wrap me-lg-2 pb-5 pb-lg-0" data-kt-swapper="true" data-kt-swapper-mode="prepend" data-kt-swapper-parent="{default: '#kt_content_container', lg: '#kt_header_container'}">
                        <!--begin::Heading-->
                        <!--end::Heading-->
                    </div>
                    <!--begin::Page title-->
                    <!--end::Page title=-->
                    <!--begin::Wrapper-->
                    <div class="d-flex d-lg-none align-items-center ms-n2 me-2">
                        <!--begin::Aside mobile toggle-->
                        <div class="btn btn-icon btn-active-icon-primary" id="kt_aside_toggle">
                            <!--begin::Svg Icon | path: icons/duotune/abstract/abs015.svg-->
                            <span class="svg-icon svg-icon-1 mt-1">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                    <path d="M21 7H3C2.4 7 2 6.6 2 6V4C2 3.4 2.4 3 3 3H21C21.6 3 22 3.4 22 4V6C22 6.6 21.6 7 21 7Z" fill="black"></path>
                                    <path opacity="0.3" d="M21 14H3C2.4 14 2 13.6 2 13V11C2 10.4 2.4 10 3 10H21C21.6 10 22 10.4 22 11V13C22 13.6 21.6 14 21 14ZM22 20V18C22 17.4 21.6 17 21 17H3C2.4 17 2 17.4 2 18V20C2 20.6 2.4 21 3 21H21C21.6 21 22 20.6 22 20Z" fill="black"></path>
                                </svg>
                            </span>
                            <!--end::Svg Icon-->
                        </div>
                        <!--end::Aside mobile toggle-->
                        <!--begin::Logo-->
                        <a href="@Url.Action("Index", "Home", new {area = string.Empty})" class="d-lg-none">
                            @await Component.InvokeAsync(typeof(AppLogoViewComponent), new {logoSkin = (theme.BaseSettings.Layout.DarkMode ? "dark":"light" ) + "-sm"})
                        </a>
                        <!--end::Logo-->
                    </div>
                    <!--end::Wrapper-->
                    <!--begin::Topbar-->
                    <div class="d-flex align-items-center flex-shrink-0">
                        @await Component.InvokeAsync(typeof(AppActiveUserDelegationsComboboxViewComponent))
                        @await Component.InvokeAsync(typeof(AppSubscriptionBarViewComponent), new {
                            cssClass = "btn btn-icon position-relative btn-color-gray-700 btn-active-color-primary btn-outline btn-outline-secondary w-30px h-30px me-2"
                        })
                        @await Component.InvokeAsync(typeof(AppQuickThemeSelectViewComponent), new
                        {
                        cssClass = "btn btn-icon btn-color-gray-700 btn-active-color-primary btn-outline btn-outline-secondary w-30px h-30px me-2",
                        iconClass = "flaticon-interface-7 fs-4"
                        })
                        @await Component.InvokeAsync(typeof(AppLanguageSwitchViewComponent), new
                        {
                        cssClass = "btn btn-icon btn-color-gray-700 btn-active-color-primary btn-outline btn-outline-secondary w-30px h-30px me-2",
                        })
                        @await Component.InvokeAsync(typeof(AppRecentNotificationsViewComponent), new
                        {
                        cssClass = "position-relative btn btn-icon btn-color-gray-700 btn-active-color-primary btn-outline btn-outline-secondary w-30px h-30px me-2",
                        iconClass = "flaticon-alert-2 unread-notification fs-4"
                        })
                        @await Component.InvokeAsync(typeof(AppChatTogglerViewComponent), new
                        {
                        cssClass = "position-relative btn btn-icon btn-color-gray-700 btn-active-color-primary btn-outline btn-outline-secondary w-30px h-30px me-2",
                        iconClass = "flaticon-chat-2 fs-4"
                        })
                        @await Component.InvokeAsync(typeof(AppUserMenuViewComponent), new
                        {
                        RenderOnlyIcon = true,
                        anchorCssClass = "btn btn-icon btn-color-gray-700 btn-active-color-primary btn-outline btn-outline-secondary w-30px h-30px me-2"
                        })
                    </div>
                    <!--end::Topbar-->
                </div>
                <!--end::Container-->
            </div>
            <!--end::Header-->
            <!--begin::Content-->
            @if (AlertManager.Alerts.Any())
            {
                <div id="AbpPageAlerts">
                    @foreach (var alertMessage in AlertManager.Alerts)
                    {
                        <div class="alert alert-@alertMessage.Type.ToString().ToLower() @Html.Raw(alertMessage.Dismissible ? "alert-dismissible" : "")" role="alert">
                            <div class="alert-text">
                                <h4 class="alert-heading">
                                    @alertMessage.Title
                                </h4>
                                <p>@alertMessage.Text</p>
                            </div>
                            @if (alertMessage.Dismissible)
                            {
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            }
                        </div>
                    }
                </div>
            }
            @RenderBody()
            <!--end::Content-->
            <!--begin::Footer-->
            @await Component.InvokeAsync(typeof(AppTheme3FooterViewComponent))
            <!--end::Footer-->
        </div>
    </div>
    <!--end::Page-->
</div>